package org.yakindu.scr.lightswitch;

public class LightSwitchStatemachine implements ILightSwitchStatemachine {

	private boolean initialized = false;

	public enum State {
		main_region_Init, main_region_ReceiveData, main_region_PrintData, $NullState$
	};

	private final State[] stateVector = new State[1];

	private int nextStateIndex;

	private boolean onDataReceived;

	public LightSwitchStatemachine() {

	}

	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}

		clearEvents();
		clearOutEvents();

	}

	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
					"The statemachine needs to be initialized first by calling the init() function.");

		enterSequence_main_region_default();
	}

	public void exit() {
		exitSequence_main_region();
	}

	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {

		return stateVector[0] != State.$NullState$;
	}

	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	 * @see IStatemachine#isFinal() 
	 */
	public boolean isFinal() {
		return false;
	}

	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		onDataReceived = false;

	}

	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}

	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
		switch (state) {
			case main_region_Init :
				return stateVector[0] == State.main_region_Init;
			case main_region_ReceiveData :
				return stateVector[0] == State.main_region_ReceiveData;
			case main_region_PrintData :
				return stateVector[0] == State.main_region_PrintData;
			default :
				return false;
		}
	}

	private void raiseOnDataReceived() {
		onDataReceived = true;
	}

	private boolean check_main_region_Init_tr0_tr0() {
		return true;
	}

	private boolean check_main_region_ReceiveData_tr0_tr0() {
		return onDataReceived;
	}

	private boolean check_main_region_PrintData_tr0_tr0() {
		return true;
	}

	private void effect_main_region_Init_tr0() {
		exitSequence_main_region_Init();

		enterSequence_main_region_ReceiveData_default();
	}

	private void effect_main_region_ReceiveData_tr0() {
		exitSequence_main_region_ReceiveData();

		enterSequence_main_region_PrintData_default();
	}

	private void effect_main_region_PrintData_tr0() {
		exitSequence_main_region_PrintData();

		enterSequence_main_region_ReceiveData_default();
	}

	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Init;
	}

	/* 'default' enter sequence for state ReceiveData */
	private void enterSequence_main_region_ReceiveData_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ReceiveData;
	}

	/* 'default' enter sequence for state PrintData */
	private void enterSequence_main_region_PrintData_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_PrintData;
	}

	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}

	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for state ReceiveData */
	private void exitSequence_main_region_ReceiveData() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for state PrintData */
	private void exitSequence_main_region_PrintData() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
			case main_region_Init :
				exitSequence_main_region_Init();
				break;

			case main_region_ReceiveData :
				exitSequence_main_region_ReceiveData();
				break;

			case main_region_PrintData :
				exitSequence_main_region_PrintData();
				break;

			default :
				break;
		}
	}

	/* The reactions of state Init. */
	private void react_main_region_Init() {
		effect_main_region_Init_tr0();
	}

	/* The reactions of state ReceiveData. */
	private void react_main_region_ReceiveData() {
		if (check_main_region_ReceiveData_tr0_tr0()) {
			effect_main_region_ReceiveData_tr0();
		}
	}

	/* The reactions of state PrintData. */
	private void react_main_region_PrintData() {
		effect_main_region_PrintData_tr0();
	}

	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}

	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The statemachine needs to be initialized first by calling the init() function.");

		clearOutEvents();

		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {

			switch (stateVector[nextStateIndex]) {
				case main_region_Init :
					react_main_region_Init();
					break;
				case main_region_ReceiveData :
					react_main_region_ReceiveData();
					break;
				case main_region_PrintData :
					react_main_region_PrintData();
					break;
				default :
					// $NullState$
			}
		}

		clearEvents();
	}
}
