package org.yakindu.scr.lightswitch;

public class LightSwitchStatemachine implements ILightSwitchStatemachine {

	protected class SCIAciPersonImpl implements SCIAciPerson {

		private String name;

		public String getName() {
			return name;
		}

		public void setName(String value) {
			this.name = value;
		}

		private long age;

		public long getAge() {
			return age;
		}

		public void setAge(long value) {
			this.age = value;
		}

		private boolean gender;

		public boolean getGender() {
			return gender;
		}

		public void setGender(boolean value) {
			this.gender = value;
		}

		private long ethnicty;

		public long getEthnicty() {
			return ethnicty;
		}

		public void setEthnicty(long value) {
			this.ethnicty = value;
		}

		private boolean glasses;

		public boolean getGlasses() {
			return glasses;
		}

		public void setGlasses(boolean value) {
			this.glasses = value;
		}

		private long attractiveness;

		public long getAttractiveness() {
			return attractiveness;
		}

		public void setAttractiveness(long value) {
			this.attractiveness = value;
		}

		private boolean speaking;

		public boolean getSpeaking() {
			return speaking;
		}

		public void setSpeaking(boolean value) {
			this.speaking = value;
		}

		private String emotions;

		public String getEmotions() {
			return emotions;
		}

		public void setEmotions(String value) {
			this.emotions = value;
		}

	}

	protected SCIAciPersonImpl sCIAciPerson;

	private boolean initialized = false;

	public enum State {
		main_region_Off, main_region_On, main_region_Test, $NullState$
	};

	private final State[] stateVector = new State[1];

	private int nextStateIndex;

	private boolean operate;

	private boolean faceFound;

	public LightSwitchStatemachine() {

		sCIAciPerson = new SCIAciPersonImpl();
	}

	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}

		clearEvents();
		clearOutEvents();

		sCIAciPerson.setName("");

		sCIAciPerson.setAge(0);

		sCIAciPerson.setGender(false);

		sCIAciPerson.setEthnicty(0);

		sCIAciPerson.setGlasses(false);

		sCIAciPerson.setAttractiveness(0);

		sCIAciPerson.setSpeaking(false);

		sCIAciPerson.setEmotions("");
	}

	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
					"The statemachine needs to be initialized first by calling the init() function.");

		enterSequence_main_region_default();
	}

	public void exit() {
		exitSequence_main_region();
	}

	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {

		return stateVector[0] != State.$NullState$;
	}

	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	 * @see IStatemachine#isFinal() 
	 */
	public boolean isFinal() {
		return false;
	}

	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		operate = false;
		faceFound = false;

	}

	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}

	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
		switch (state) {
			case main_region_Off :
				return stateVector[0] == State.main_region_Off;
			case main_region_On :
				return stateVector[0] == State.main_region_On;
			case main_region_Test :
				return stateVector[0] == State.main_region_Test;
			default :
				return false;
		}
	}

	public SCIAciPerson getSCIAciPerson() {
		return sCIAciPerson;
	}

	private void raiseOperate() {
		operate = true;
	}

	private void raiseFaceFound() {
		faceFound = true;
	}

	private boolean check_main_region_Off_tr0_tr0() {
		return operate;
	}

	private boolean check_main_region_Off_tr1_tr1() {
		return (sCIAciPerson.name == null ? "Max" == null : sCIAciPerson.name.equals("Max"));
	}

	private boolean check_main_region_On_tr0_tr0() {
		return operate;
	}

	private void effect_main_region_Off_tr0() {
		exitSequence_main_region_Off();

		enterSequence_main_region_On_default();
	}

	private void effect_main_region_Off_tr1() {
		exitSequence_main_region_Off();

		enterSequence_main_region_Test_default();
	}

	private void effect_main_region_On_tr0() {
		exitSequence_main_region_On();

		enterSequence_main_region_Off_default();
	}

	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Off;
	}

	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_On;
	}

	/* 'default' enter sequence for state Test */
	private void enterSequence_main_region_Test_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Test;
	}

	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}

	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for state Test */
	private void exitSequence_main_region_Test() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}

	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
			case main_region_Off :
				exitSequence_main_region_Off();
				break;

			case main_region_On :
				exitSequence_main_region_On();
				break;

			case main_region_Test :
				exitSequence_main_region_Test();
				break;

			default :
				break;
		}
	}

	/* The reactions of state Off. */
	private void react_main_region_Off() {
		if (check_main_region_Off_tr0_tr0()) {
			effect_main_region_Off_tr0();
		} else {
			if (check_main_region_Off_tr1_tr1()) {
				effect_main_region_Off_tr1();
			}
		}
	}

	/* The reactions of state On. */
	private void react_main_region_On() {
		if (check_main_region_On_tr0_tr0()) {
			effect_main_region_On_tr0();
		}
	}

	/* The reactions of state Test. */
	private void react_main_region_Test() {
	}

	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Off_default();
	}

	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The statemachine needs to be initialized first by calling the init() function.");

		clearOutEvents();

		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {

			switch (stateVector[nextStateIndex]) {
				case main_region_Off :
					react_main_region_Off();
					break;
				case main_region_On :
					react_main_region_On();
					break;
				case main_region_Test :
					react_main_region_Test();
					break;
				default :
					// $NullState$
			}
		}

		clearEvents();
	}
}
